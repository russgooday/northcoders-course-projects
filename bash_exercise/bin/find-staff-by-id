#!/usr/bin/env bash
ROOT=~/northcoders-course-projects/bash_exercise/filesystem
ID_REGEX="^[0-9]{1,3}$"

# colours
NORMAL=$(tput sgr0 setaf 15)
PRIMARY=$(tput setaf 2 bold)
SECONDARY=$(tput sgr0 setaf 15)

# Function: pad_zeros
# Description: Pads a number with zeros
# Parameters:
#   $1 - number (number to pad)
#   $2 - length (length of the number)
# Outputs: Padded number
function pad_zeros() {
    local padding=$2
    printf "%0${padding}d" $1
}

# Function: print-staff-details
# Description: Prints the details of a staff member
# Parameters:
#   $1 - id (staff id)
#   $2 - path (path to staff json file)
# Outputs: Formatted string
function print-staff-details() {
    local id=$1
    local json=$(jq . $2)
    local name=$(jq -r '.name' <<< "$json")
    local details=$(
        jq -C --arg id $id '{id: $id} + . | .languages |= join(", ")' <<< "$json"
    )

    echo -e "\n${PRIMARY}Staff member: ${SECONDARY}$name${NORMAL}\n$details\n"
}

# Function: find-staff-by-ids
# Description: Finds a staff member by their id
# Parameters:
#   $1 - id (staff id)
# Outputs: Formatted string
function find-staff-by-id() {
    # pad with zeros to 3 digits
    local id=$(pad_zeros $1 3)

    if [ -f $ROOT/staff/nc-$id.json ]; then
        print-staff-details $id $ROOT/staff/nc-$id.json
    else
        echo "No staff member with an id of ${PRIMARY}$1"
    fi
}

# Check if the provided argument is a valid id
if [[ -n $1 && $1 =~ $ID_REGEX ]]; then
    find-staff-by-id $1
    exit 0
fi

echo "Please enter a valid id number ${PRIMARY}[0-999]"
exit 1
